imputed <- mice(dat4, seed = 1, m = 50, printFlag = F, method = method, predictorMatrix = predM)
plot(imputed)
dat <- complete(imputed,"long")
ggplot(dat)+
geom_point(aes(x1*x2, x1x2)) +
labs(title = "x1 * x2 vs imputed x1x2") +
theme_bw()
pool(with(imputed, lm(y~x1+x2+x1x2)))
summary(pool(with(imputed, lm(y~x1+x2+x1x2))), conf.int = T)[-1,]
pool(with(imputed, lm(y~x1+x2+x1x2)))[-1,]
summary(pool(with(imputed, lm(y~x1+x2+x1x2))), conf.int = T)[-1,]
plot(pool(with(imputed, lm(y~x1+x2+x1x2))))
x <- pool(with(imputed, lm(y~x1+x2+x1x2)))
x
x$pooled
with(imputed, lm(y~x1+x2+x1x2))
with(imputed, lm(y~x1+x2+x1x2))
plot(with(imputed, lm(y~x1+x2+x1x2)))
pool(with(imputed, lm(y~x1+x2+x1x2)))[-1,]
summary(pool(with(imputed, lm(y~x1+x2+x1x2))), conf.int = T)[-1,]
pool(with(imputed, lm(y~x1+x2+x1x2)))[-1,]
summary(pool(with(imputed, lm(y~x1+x2+x1x2))), conf.int = T)
imputed <- mice(dat4, seed = 1, m =50, printFlag = F)
plot(imputed)
pool(with(imputed, lm(y~x1+x2+x1x2)))[-1,]
summary(pool(with(imputed, lm(y~x1+x2+x1x2))), conf.int = T)[-1,]
dat <- complete(imputed,"long")
ggplot(dat)+
geom_point(aes(x1*x2, x1x2)) +
labs(title = "x1 * x2 vs imputed x1x2") +
theme_bw()
ggplot(dat)+
geom_point(aes(x1*x2, x1x2)) +
geom_abline(slope = 1) +
labs(title = "x1 * x2 vs imputed x1x2") +
theme_bw()
ggplot(dat)+
geom_point(aes(x1*x2, x1x2)) +
geom_abline(slope = 1, colour = "blue") +
labs(title = "x1 * x2 vs imputed x1x2") +
theme_bw()
ggplot(dat)+
geom_point(aes(x1*x2, x1x2)) +
geom_abline(slope = 1, colour = "blue") +
labs(title = "imputed x1 * x2 vs imputed x1x2") +
theme_bw()
cor(dat$x1*dat$x2, dat$x1x2)
load("NHANES2.Rdata")
require(mice)
mdpat_mice <- md.pattern(NHANES2,rotate.names = T)
require(JointAI)
md_pattern(NHANES2, pattern = FALSE, color = c('#34111b', '#e30f41'))
pacman::p_load(tidyverse, mice, pander, JointAI)
dat1 <- nhanes
sum(!complete.cases(nhanes))/nrow(dat1)
# create two list of 100 to store that values
sr_within_bound <- rep(0, 100)
bt_within_bound <- rep(0, 100)
n <- 20
# looping for each data set
for (i in 1:100){
dat <- dat2[,,i]
# pool results from each method
sr <- pool(with(mice(dat, seed = 1, m = n, method = "norm.nob", printFlag = F), lm(Y~X)))
boot <- pool(with(mice(dat, seed = 1, m = n, method = "norm.boot", printFlag = F), lm(Y~X)))
# check if the CI contain the true value for beta1
sr_within_bound[i] <- sum(summary(sr, conf.int = TRUE)[2, c(7, 8)] > 3) == 1
bt_within_bound[i] <- sum(summary(boot, conf.int = TRUE)[2, c(7, 8)] > 3) == 1
}
glue::glue("Empirical coverage probability of the 95% confidence intervals for beta1 \nin a stochastic regression imputation(mathod = \"norm.nob\"): ", sum(sr_within_bound)/100, "\nEmpirical coverage probability of the 95% confidence intervals for beta1 \nin a bootstrap based regression imputation(mathod = \"norm.boot\"): ", sum(bt_within_bound)/100)
pt(q =.95,df = 99)
pt(q =.5,df = 99)
pt(q =0,df = 99)
pt(q =1,df = 99)
pt(q = 0,df = 99)
pbinom(.95,100,prob = .95)
pbinom(1,100,prob = .95)
pbinom(.95,100,prob = .95)
pbinom(.5,100,prob = .95)
pbinom(100,100,prob = .95)
pbinom(88,100,prob = .95)
pbinom(95,100,prob = .95)
load("NHANES2.Rdata")
mdpat_mice <- md.pattern(NHANES2,rotate.names = T)
6+7+10+2+6
dim(NHANES2)
411-500
6+7+10+2+2+12+6
6+1+1+1+1+1
3+1+1+1+1+6
29+2+13+45
plot_all(NHANES2, breaks = 30, ncol = 4)
plot_all(select(NHANES2, gender,age, hgt,WC), breaks = 30, ncol = 4)
plot_all(select(NHANES2, gender,age, hgt,WC), breaks = 30, ncol = 2)
plot_all(select(NHANES2, gender,age, hgt,WC), breaks = 10, ncol = 2)
plot_all(NHANES2, breaks = 10, ncol = 4)
plot_all(select(NHANES2, gender,age, hgt,WC), breaks = 10, ncol = 2)
?plot_all
plot_all(select(NHANES2, gender,age, hgt,WC), breaks = 10, ncol = 2, fill = NHANES2$gender)
plot_all(select(NHANES2, gender,age, hgt,WC), breaks = 10, ncol = 2)
sample(NHANES2$hgt)
# random permutation of times
complete.cases(sample(NHANES2$hgt))
# random permutation of times
complete(sample(NHANES2$hgt))
?remove na
??remove na
??removena
drop_na(NHANES2$hgt)
na.omit(sample(NHANES2$hgt))
na.omit(NHANES2$hgt)
na.omit(NHANES2$hgt)[1]
x <- na.omit(NHANES2$hgt)
x
sample(na.omit(NHANES2$hgt))
set.seed(seed)
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
length(x)
length(x)/2
length(x) * .75
(length(x)-367)
(length(x)-367)/5
(length(x)-367)/10
(length(x)-367)/12
(length(x)-367)/14
(length(x)-367)/12
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
ip_1 <- ip_times[1:366]; ip_2 <- ip_times[367:length(x)]
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# 10 bins
nbins <- 10
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# chisq test
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
ei <- rep((length(x)-367)/nbins, nbins)
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
cat("IA analysis: chisq.pass = ", chisq.pass, "; alpha_hat = ", alpha_hat,
"; beta_hat = ", beta_hat, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
cat("IA analysis: chisq.pass = ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
qchisq(.95, df=nbins-1)
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# 10 bins
nbins <- 10
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# chisq test
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
ei <- rep((length(x)-367)/nbins, nbins)
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("IA analysis: chisq.pass = ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# 10 bins
nbins <- 10
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# chisq test
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
ei <- rep((length(x)-367)/nbins, nbins)
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# 10 bins
nbins <- 10
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# chisq test
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
ei <- rep((length(x)-367)/nbins, nbins)
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 14
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
set.seed(1977)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 12
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
ei
set.seed(17)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 12
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
set.seed(11117)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 12
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
set.seed(1117)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 12
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
set.seed(1117)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 10
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
ei
set.seed(1117)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 11
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
set.seed(1117)
x <- na.omit(NHANES2$hgt)
random_hgt <- sample(x)
# split data -- estimate lambda on split 1
obs <- x[1:366]
test <- x[367:length(x)]
s_hat <- sd(obs)
x_bar <- mean(obs)
# create 10 bins
nbins <- 12
intvs <- seq(0, 1, 1/nbins)
bins <- qnorm(intvs, mean = x_bar, sd = s_hat)
# number of observed data in each bins
oi <- cut(test, bins, labels=1:nbins) %>% as.numeric %>% table
# number of expected data in each bins
ei <- rep((length(x)-367)/nbins, nbins)
# with bins = 10, does chi^2
chisq.pass <- sum((oi - ei)^2 / ei) <= qchisq(.95, df=nbins-1)
glue::glue("Chisq.pass? ", chisq.pass, "\n", "chi^2 = ", sum((oi - ei)^2 / ei), sep="")
qchisq(.95, df=nbins-1)
#imp0 <- mice(NHANES2, m=10, maxit = 0, printFlag = F, seed = 99772)
imp1 <- mice(NHANES2, m=10, maxit = 20, printFlag = F, seed = 72)
#imp0 <- mice(NHANES2, m=10, maxit = 0, printFlag = F, seed = 99772)
imp1 <- mice(NHANES2, m=10, maxit = 10, printFlag = F, seed = 72)
plot(imp1, layout = c(4,4))
summary(imp1)
densityplot(imp1)
#imp0 <- mice(NHANES2, m=10, maxit = 0, printFlag = F, seed = 99772)
imp1 <- mice(NHANES2, m=10, maxit = 10, printFlag = F, seed = 72)
plot(imp1, layout = c(4,4))
densityplot(imp1)
imp0 <- mice(NHANES2, m=10, maxit = 0, printFlag = F, seed = 99772)
imp0$visitSequence
imp0 <- mice(NHANES2, m=10, maxit = 0, printFlag = F, seed = 99772)
imp1 <- mice(NHANES2, m=10, maxit = 10, printFlag = F, seed = 72)
plot(imp1, layout = c(4,4))
densityplot(imp1)
?densityplot
complete(imp1,1)
complete(imp1,1)$hgt
hist(complete(imp1,1)$hgt)
hist(complete(imp1,2)$hgt)
hist(complete(imp1,3)$hgt)
hist(complete(imp1,4)$hgt)
hist(complete(imp1,5)$hgt)
densityplot(imp1, ~hgt|gender)
densityplot(imp1, ~hgt|gender)
xyplot(imp1, hgt ~ wgt | gender, pch = c(1, 20))
densityplot(imputed)
true_missing <- (complete(imputed, 5)$x1 * dat4$x2)[is.na(dat4$x1x2)]
c_missing <- complete(imputed, 5)$x1x2[is.na(dat4$x1x2)]
plot(true_missing, c_missing)
NHANES2 %>%
select(hgt,gender) %>%
transmute(is.na(hgt), gender) %>%
table()
NHANES2 %>%
transmute(is.na(hgt), gender) %>%
table()
NHANES2 %>%
transmute(is.na(hgt), gender) %>%
table() %>%
pander()
xyplot(imp1, hgt ~ wgt | gender, pch = c(1, 20))
xyplot(imp1, WC ~ wgt | gender, pch = c(1, 20))
?mice
xyplot(imp1, WC ~ wgt, pch = c(1, 20))
xyplot(imp1, WC ~ age, pch = c(1, 20))
xyplot(imp1, WC ~ wgt, pch = c(1, 20))
imp1 <- mice(NHANES2, m=50, maxit = 10, printFlag = F, seed = 72)
plot(imp1, layout = c(4,4))
densityplot(imp1)
pool(with(imp1, lm(wgt~gender+ age+ hgt + WC))) %>%
summary(conf.int = T)
result <- pool(with(imp1, lm(wgt~gender+ age+ hgt + WC)))
result <- pool(with(imp1, lm(wgt~gender+ age+ hgt + WC)))
result
result <- pool(with(imp1, lm(wgt~gender+ age+ hgt + WC)))
result
summary(result, conf.int = T)
imp0
imp1 <- mice(NHANES2, m=50, maxit = 10, printFlag = F, seed =1332)
result <- pool(with(imp1, lm(wgt~gender+ age+ hgt + WC)))
result
summary(result, conf.int = T)
pool.r.squared(result)
result <- pool(with(imp1, lm(wgt~gender+ age+ hgt + WC)))
pool.r.squared(result)
result
summary(result, conf.int = T)
tinytex::reinstall_tinytex()
---
title: "Simulation Study"
author: "Keith Tung"
date: "13/04/2022"
output: pdf_document
header-includes:
- \usepackage[utf8]{inputenc}
- \usepackage[shortlabels]{enumitem}
- \usepackage{amsmath}
- \usepackage[allcolors=blue,colorlinks=true,breaklinks]{hyperref}
- \usepackage{graphicx}
- \usepackage{titlesec}
- \usepackage[a4paper, total={6.75in, 8in}]{geometry}
- \titleformat*{\section}{\Large\bfseries}
- \titleformat*{\subsection}{\normalsize\bfseries}
- \titlespacing*{\section}{0pt}{2.5ex}{3.3ex}
---
---
title: "Simulation Study"
author: "Keith Tung"
date: "13/04/2022"
output: pdf_document
header-includes:
- \begin{document}
- \usepackage[utf8]{inputenc}
- \usepackage{amsthm, amsmath, amssymb}
- \usepackage{microtype}
- \usepackage{fancyhdr}
- \usepackage{setspace}
- \usepackage[a4paper, total={7in, 9.5in}]{geometry}
- \usepackage{titlesec}
- \pagestyle{fancy}
- \fancyhead{}\renewcommand{\headrulewidth}{0pt}
- \fancyfoot[L]{}
- \fancyfoot[C]{}
- \fancyfoot[R]{\thepage}
- \titleformat*{\section}{\Large\bfseries}
- \titleformat*{\subsection}{\normalsize\bfseries}
- \titlespacing*{\section}{0pt}{2.5ex}{3.3ex}
- \titlespacing*{\subsection}{0pt}{4ex}{3.3ex}
---
```{=latex}
```
---
title: "Simulation Study"
author: "Keith Tung"
date: "13/04/2022"
output: pdf_document
header-includes:
- \usepackage[utf8]{inputenc}
- \usepackage{amsthm, amsmath, amssymb}
- \usepackage{microtype}
- \usepackage{fancyhdr}
- \usepackage{setspace}
- \usepackage{titlesec}
- \pagestyle{fancy}
- \usepackage[a4paper, total={7in, 9.5in}]{geometry}
- \fancyhead{}\renewcommand{\headrulewidth}{0pt}
- \fancyfoot[L]{}
- \fancyfoot[C]{}
- \fancyfoot[R]{\thepage}
- \titleformat*{\section}{\Large\bfseries}
- \titleformat*{\subsection}{\normalsize\bfseries}
- \titlespacing*{\section}{0pt}{2.5ex}{3.3ex}
- \titlespacing*{\subsection}{0pt}{4ex}{3.3ex}
---
\section{Goal }
\section{To Simulation}
\section{One-Shot Experiment}
\section{Strengths and Weaknesses}
\section{To Scale}
\section{Metrics}
\section{Result}
\section{Goal}
\section{To Simulation}
\section{One-Shot Experiment}
\section{Strengths and Weaknesses}
\section{To Scale}
\section{Metrics}
\section{Result}
pacman::p_load(tidyverse, data.table, GGally, lubridate)
dat <- fread("../../hotel.csv", na.strings = c("NULL", "NaN", "NA"))
setwd("C:/Users/keith/Desktop/semeter 2 2021-2022/ML in Python/mlp-proj2/Keith/R")
dat <- fread("../../hotel.csv", na.strings = c("NULL", "NaN", "NA"))
